version: 2.1
orbs:
  slack: circleci/slack@4.12.6

executors:
  app-executor:
    docker:
    - image: circleci/node:latest
    working_directory: ~/repo

  slack-executor:
    docker:
    - image: 'cibuilds/base:latest'
    resource_class: small

  terraform-executor:
    docker:
    - image: hashicorp/terraform:latest

aliases:
- &show-current-branch-name
  run:
    name: Show current branch
    command: echo ${CIRCLE_BRANCH}

- &restore-cache
  restore_cache:
    keys:
    - app-{{checksum "package.json"}}
    - app-

- &install-dependencies
  run:
    name: Install dependencies
    command: |
      mkdir -p artifacts
      npm install

- &save-cache
  save_cache:
    paths:
    - node_modules
    key: app-{{checksum "package.json"}}

- &install-aws-cli
  run:
    name: Installing AWS CLI
    working_directory: /
    command: |
      sudo apt-get -y -qq update
      sudo apt-get install -y awscli
      sudo apt-get install -y python3-capstone build-essential

- &build-project
  run:
    name: Build Project
    command: "npm install\nnpm run build\ncd build \nzip ../build.zip -r * .[^.]*\necho \"Build successful\"\n#magic___^_^___line\n"
jobs:
  build:
    executor: app-executor
    steps:
    - checkout
    - *show-current-branch-name
    - *restore-cache
    - *install-dependencies
    - *save-cache
    - run:
        name: Copy Infrastructure Folder
        command: cp -r infrastructure artifacts/infrastructure

    - persist_to_workspace:
        root: ./
        paths:
        - artifacts

  linting:
    executor: app-executor
    steps:
    - checkout
    - *show-current-branch-name
    - *restore-cache
    - run:
        name: Run linting
        command: npm run lint

  prettier:
    executor: app-executor
    steps:
    - checkout
    - *show-current-branch-name
    - *restore-cache
    - run:
        name: Run prettier check
        command: npm run prettier:check

  terraform-validate:
    executor: terraform-executor
    steps:
    - checkout
    - *show-current-branch-name
    - run:
        name: Terraform Validate & Format
        command: "cd infrastructure/ \nterraform init -backend=false\nterraform validate \nterraform fmt -check\n  #magic___^_^___line\n"
  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
    - checkout
    - attach_workspace:
        at: ./
    - *show-current-branch-name
    - run:
        name: Terraform Plan
        command: |
          cd artifacts/infrastructure/
          terraform init
          terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
          terraform plan

    - run:
        name: Terraform Apply
        command: |
          cd artifacts/infrastructure/
          terraform workspace select ${CIRCLE_BRANCH}
          terraform apply --auto-approve
          terraform output cinema_aws_terraform_outputs > ../cinema_bucket_name.txt
          terraform output aws_cloudfront_distribution_id > ../cloudfront_distribution_id.txt

    - persist_to_workspace:
        root: ./
        paths:
        - artifacts

  deploy-to-aws-s3:
    executor: app-executor
    steps:
    - checkout
    - attach_workspace:
      at: ./
    - *show-current-branch-name
    - *install-aws-cli
    - *build-project
    - run:
        name: Deploy to AWS s3
        command: "AWS_BUCKET_NAME=$(cat artifacts/cinema_bucket_name.txt | sed 's/\\\"//g' )\necho $AWS_BUCKET_NAME\nif [\"${CIRCLE_BRANCH}\"  == \"main\"]\nthen \n  aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete\nelif [\"${CIRCLE_BRANCH}\"  == \"staging\"]\nthen \n  aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete\nelse\n  aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete\nfi\n  #magic___^_^___line\n"
  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
    - checkout
    - attach_workspace:
      at: ./
    - *show-current-branch-name
    - *install-aws-cli
    - *build-project
    - run:
        name: Deploy to AWS Cloudfront
        command: "CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/aws_cloudfront_distribution_id.txt | sed 's/\\\"//g' )\necho $CLOUDFRONT_DISTRIBUTION_ID\naws configure set preview.cloudfront true\nif [\"${CIRCLE_BRANCH}\"  == \"main\"]\nthen \n  aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\\*\nelif [\"${CIRCLE_BRANCH}\"  == \"staging\"]\nthen \n  aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\\*\nelse\n aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\\*\nfi\n  #magic___^_^___line\n"
  notify-via-slack:
    executor: slack-executor
    steps:
    - run: echo "Slack notification"
    - slack/notify:
        event: "always"
        channel: "cinema-aws-terraform"
        template: ""
        custom: |
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${CIRCLE_BRANCH} branch to aws s3 and cloudfront is complete. üëç",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch*:\n$CIRCLE_BRANCH"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }

  terraform-destroy:
    executor: terraform-executor
    steps:
    - checkout
    - *show-current-branch-name
    - run:
        name: Terraform Destroy
        command: |
          cd infrastructure/
          terraform init
          terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
          terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
    - build
    - linting:
        requires:
        - build
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - prettier:
        requires:
        - build
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - terraform-validate:
        requires:
        - linting
        - prettier
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - terraform-plan-and-apply:
        requires:
        - terraform-validate
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - deploy-to-aws-s3:
        requires:
        - terraform-plan-and-apply
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - deploy-to-aws-cloudfront:
        requires:
        - deploy-to-aws-s3
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - notify-via-slack:
        requires:
        - deploy-to-aws-cloudfront
        filters:
          branches:
            only:
            - development
            - staging
            - main

    - hold:
        type: approval
        requires:
        - deploy-to-aws-cloudfront

    - terraform-destroy:
        requires:
        - hold
        filters:
          branches:
            only:
            - development
            - staging
            - main
